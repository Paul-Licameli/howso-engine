(seq
	#unit_test (direct_assign_to_entities (assoc unit_test (load "../unit_tests/unit_test.amlg")))
	(call (load "../unit_tests/unit_test_howso.amlg") (assoc name "at_547_no2.amlg"))

	(call_entity "howso" "create_trainee" (assoc trainee "model" ))
	(assign_to_entities "howso" (assoc trainee "model"))
	;(call_entity "howso" "set_random_seed" (assoc trainee "model" seed "12345"))

	(declare (assoc dataset (load "datasets/547_no2.csv")))
	(declare (assoc
		features (first dataset)
		data (tail dataset)
	))
	(declare (assoc
		twenty_percent_size (* (size data) .2)
		eighty_percent_size (* (size data) .8)
	))
	(declare (assoc
		;randomly select 20% unique indices to holdout
		holdout_indices (rand (indices data) twenty_percent_size (true))
	))
	(declare (assoc
		test_data (unzip data holdout_indices)
		train_data (filter (lambda (not (contains_value holdout_indices (target_index)))) data)
	))

	(call_entity "howso" "train" (assoc
		trainee "model"
		features features
		input_cases train_data
	))

	(print "loaded: " (get (call_entity "howso" "get_num_training_cases" (assoc trainee "model")) (list "payload" "count"))"\n")

	(call_entity "howso" "analyze" (assoc
		trainee "model"
		context_features (trunc features)
		action_features (list (last features))
		k_folds 1
		num_analysis_samples 1000
		use_deviations (null)
	))

	(declare (assoc
		internal_params (call_entity "howso" "get_internal_parameters" (assoc trainee "model"))
	))
	(declare (assoc
		analyze_mae (get internal_params (list "payload" "hyperparameter_map" "target" "full" ".none" "gridSearchError"))
	))

	;(print "\nInternal Params: " internal_params )

	(declare (assoc
		total_diff 0
		test_data_no_target
			(map
				(lambda (trunc (target_value)))
				test_data
			)
	))

	(declare (assoc
		batch_reacts
			(get
				(call_entity "howso" "batch_react" (assoc
					context_features (trunc features)
					action_features (list (last features))
					context_values test_data_no_target
					num_cases_to_generate (size test_data)
				))
				(list "payload" "action_values")
			)
	))

	(map
		(lambda (let
			(assoc index (target_index 1))

			(accum (assoc
				total_diff
					(abs (-
						(get batch_reacts (list index 0))
						(last (target_value 1))
					))
			))
		))
		test_data
	)
	(declare (assoc correct (/ total_diff (size test_data))))

	(print "ANALYZED TO USE DEVIATIONS: ")
	(call assert_true (assoc obs (get internal_params (list "payload" "hyperparameter_map" "target" "full" ".none" "useDeviations")) ))

	(print "Analyze MAE: 0.5 > " analyze_mae " ")
	(call assert_true (assoc obs (< analyze_mae 0.5)))

	(print "MAE under 0.5 : " correct  " ")
	(call assert_true (assoc obs (< correct 0.5)))


	(call exit_if_failures (assoc msg unit_test_name ))
)